buildscript {
    ext {
        springBootVersion = '2.0.9.RELEASE'
        springCloudReleaseTrain = 'Finchley.SR2'

        springDataDynamoDBVersion = '5.0.4'
        gwsClientVersion = "1.1.1"
    }
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://raw.githubusercontent.com/uw-it-edm/edm-artifacts/master" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "edu.uw.concert:gradle-gitflow:0.3.1"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.5.2"
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:4.33.5")
    }
}

plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.4'
}

apply plugin: 'java'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'edu.uw.concert.gitflow'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply plugin: 'maven-publish'

group = 'edu.uw.edm'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }

    // see https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry
    // store the personal access token (PAT) in the env variable "GITHUB_PAT"
    maven {
        url = uri("https://maven.pkg.github.com/uw-it-edm/gws-client")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USER")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_PAT")
        }
    }
}

bootJar {
    baseName = 'edm-zuul-proxy'
    mainClassName= 'edu.uw.edm.edmzuulproxy.EdmZuulProxyApplication'
}

springBoot {
    mainClassName = 'edu.uw.edm.edmzuulproxy.EdmZuulProxyApplication'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.5.1'
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-zuul')
    compile('com.amazonaws:aws-java-sdk-lambda')
    compile('org.springframework.boot:spring-boot-starter-cache')
    compile('com.github.ben-manes.caffeine:caffeine')

    compile("com.github.derjust:spring-data-dynamodb:$springDataDynamoDBVersion")

    compile("edu.uw.edm.gws:gws-client:$gwsClientVersion")
    compile("edu.uw.edm.gws:gws-client-spring-boot-starter:$gwsClientVersion")

    compile('io.micrometer:micrometer-registry-statsd')
    runtime("org.pcollections:pcollections:3.1.3") // required for micrometer, expected fix in micrometer v1.0.6 (upgrading spring may fix this)

    runtime('org.springframework.boot:spring-boot-devtools')
    compileOnly('org.projectlombok:lombok:1.18.12')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudReleaseTrain}"

    }
}


publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/uw-it-edm/edm-zuul-proxy"
            credentials {
                username = System.getenv("GITHUB_ACTOR") ?: System.getenv("USER")
                password = System.getenv("GITHUB_TOKEN") ?: System.getenv("GITHUB_PAT")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java

            // Override the default artifact ID (or try to)
            artifactId = jar.baseName

            groupId = 'edu.uw.edm'

            // Set the parent so that the pom we get is valid -- otherwise we don't have any version numbers
            // for the Spring dependencies
            pom.withXml {
                asNode().appendNode('parent')
                        .appendNode('groupId', 'org.springframework.boot').parent()
                        .appendNode('artifactId', 'spring-boot-starter-parent').parent()
                        .appendNode('version', "${project.springBootVersion}")

                asNode().appendNode('repositories').appendNode('repository')
                        .appendNode('id', 'spring-releases').parent()
                        .appendNode('url', 'https://repo.spring.io/libs-release')
            }
        }
    }
}



jacocoTestReport.dependsOn test
//code coverage
jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}
